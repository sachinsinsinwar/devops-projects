pipeline {
  agent any

  options {
    timestamps()
    disableConcurrentBuilds()
    // rely on Jenkins' default "Declarative: Checkout SCM"
  }

  environment {
    IMAGE = 'sachinsingh20/demo-api'   // <-- your Docker Hub repo
    TAG   = "dev-${env.BUILD_NUMBER}"  // per-build dev tag
  }

  stages {

    stage('Sanity') {
      steps {
        sh 'echo "JENKINSFILE v4 - test inside image (no bind mounts), context=apps/demo_api"'
      }
    }

    stage('Test in image') {
      steps {
        sh '''
          set -eux
          # Build a test image from the app dir as build context
          docker build -t demo-api:test -f apps/demo_api/Dockerfile apps/demo_api

          # Run sanity + tests inside that image (no host mounts)
          docker run --rm demo-api:test python --version
          # If you have no tests yet, allow success; remove "|| true" once tests exist
          docker run --rm demo-api:test sh -lc "pytest -q || true"
        '''
      }
    }

    stage('Build & Tag') {
      steps {
        sh '''
          set -eux
          docker build -t ${IMAGE}:${TAG} -f apps/demo_api/Dockerfile apps/demo_api
          docker tag ${IMAGE}:${TAG} ${IMAGE}:dev-latest
        '''
      }
    }

    stage('Push') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
            set -eux
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push ${IMAGE}:${TAG}
            docker push ${IMAGE}:dev-latest
            docker logout || true
          '''
        }
      }
    }
  }

  post {
    always {
      sh 'docker system prune -f || true'
      cleanWs()
    }
  }
}
